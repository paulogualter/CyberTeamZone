// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(STUDENT)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Subscription and Escudos
  subscriptionId     String?
  subscriptionStatus SubscriptionStatus @default(INACTIVE)
  subscriptionPlan   SubscriptionPlan?
  escudos            Int @default(0)
  subscriptionStart  DateTime?
  subscriptionEnd    DateTime?
  
  // Escudos tracking
  userEscudos        UserEscudo[]

  // Relations
  accounts        Account[]
  sessions        Session[]
  enrollments     Enrollment[]
  payments        Payment[]
  certificates    Certificate[]
  ctfSubmissions  CTFSubmission[]
  forumPosts      ForumPost[]
  forumComments   ForumComment[]
  notifications   Notification[]
  popupNotifications PopupNotification[]
  userProgress    UserProgress[]
  userBadges      UserBadge[]
  forumPostsLiked ForumPostLike[]
  forumCommentsLiked ForumCommentLike[]
  lessonRatings   LessonRating[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum SubscriptionPlan {
  BASIC
  GOLD
  DIAMOND
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum CourseApprovalStatus {
  PENDING    // Aguardando aprovação
  APPROVED   // Aprovado pelo admin
  REJECTED   // Rejeitado pelo admin
}

enum NotificationStatus {
  ACTIVE     // Ativa e sendo exibida
  INACTIVE   // Inativa
  EXPIRED    // Expirada
}

enum PopupType {
  POPUP      // Popup com timer
  BANNER     // Banner no topo
  MODAL      // Modal centralizado
}

enum CourseType {
  RECORDED
  ONLINE
  HYBRID
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  shortDescription String? @db.VarChar(60)
  difficulty  Difficulty
  duration    Int      // in hours
  price       Float
  escudosPrice Int
  coverImage  String?
  videoUrl    String?
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  status      CourseStatus @default(ACTIVE)
  courseType  CourseType @default(RECORDED)
  startDate   DateTime? // Data de início para cursos ONLINE e HYBRID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Sistema de aprovação
  approvalStatus CourseApprovalStatus @default(PENDING)
  approvedAt     DateTime?
  approvedBy     String? // ID do admin que aprovou
  rejectionReason String? // Motivo da rejeição
  submittedForApprovalAt DateTime? // Quando foi submetido para aprovação

  // Relations
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  instructorId  String
  instructor    Instructor @relation(fields: [instructorId], references: [id])
  enrollments   Enrollment[]
  modules       Module[]
  payments      Payment[]
  certificates  Certificate[]
  ctfChallenges CTFChallenge[]
  userProgress  UserProgress[]
  userEscudos   UserEscudo[]
}

model Instructor {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  bio         String?
  avatar      String?
  expertise   Json?    // Array of expertise areas as JSON
  socialLinks Json?    // Social media links
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courses Course[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courses Course[]
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id          String      @id @default(cuid())
  title       String
  content     String
  type        LessonType
  duration    Int?        // in minutes
  order       Int
  isPublished Boolean     @default(false)
  videoUrl    String?
  attachment  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  quizzes  Quiz[]
  userProgress UserProgress[]
  lessonRatings LessonRating[]
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
  PRACTICAL
  CTF
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Quiz {
  id          String   @id @default(cuid())
  question    String
  type        QuizType
  options     Json?    // For multiple choice questions
  correctAnswer String
  explanation String?
  points      Int      @default(1)
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

enum QuizType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_BLANK
  CODE
}

model Enrollment {
  id        String   @id @default(cuid())
  enrolledAt DateTime @default(now())
  completedAt DateTime?
  progress  Float    @default(0) // percentage
  isActive  Boolean  @default(true)

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  currency      String        @default("BRL")
  status        PaymentStatus
  paymentMethod PaymentMethod
  paymentId     String?       // Stripe or MercadoPago ID
  escudosUsed   Int?          @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  courseId String?
  course   Course? @relation(fields: [courseId], references: [id])
  userEscudos UserEscudo[]
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  STRIPE
  MERCADOPAGO
  ESCUDOS
}

model Certificate {
  id          String   @id @default(cuid())
  title       String
  description String?
  issuedAt    DateTime @default(now())
  certificateUrl String?

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model UserEscudo {
  id          String   @id @default(cuid())
  amount      Int      // Quantidade de escudos
  source      EscudoSource // Origem dos escudos
  expiresAt   DateTime // Data de expiração (12 meses)
  isUsed      Boolean  @default(false) // Se foi usado
  usedAt      DateTime? // Quando foi usado
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentId   String?  // ID do pagamento que gerou os escudos
  payment     Payment? @relation(fields: [paymentId], references: [id])
  courseId    String?  // ID do curso que gerou os escudos (para compra direta)
  course      Course?  @relation(fields: [courseId], references: [id])
}

enum EscudoSource {
  SUBSCRIPTION  // Escudos de assinatura mensal
  COURSE_PURCHASE // Escudos de compra direta de curso
  MANUAL        // Escudos adicionados manualmente
  BONUS         // Escudos de bônus/promoção
}

model CTFChallenge {
  id          String   @id @default(cuid())
  title       String
  description String
  flag        String
  points      Int
  category    String
  difficulty  Difficulty
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courseId String?
  course   Course? @relation(fields: [courseId], references: [id])
  submissions CTFSubmission[]
}

model CTFSubmission {
  id        String   @id @default(cuid())
  flag      String
  isCorrect Boolean
  submittedAt DateTime @default(now())

  // Relations
  userId      String
  user        User @relation(fields: [userId], references: [id])
  challengeId String
  challenge   CTFChallenge @relation(fields: [challengeId], references: [id])

  @@unique([userId, challengeId])
}

model ForumPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  isPinned  Boolean  @default(false)
  isLocked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId String
  author   User @relation(fields: [authorId], references: [id])
  comments ForumComment[]
  likes    ForumPostLike[]
}

model ForumComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId String
  author   User @relation(fields: [authorId], references: [id])
  postId   String
  post     ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes    ForumCommentLike[]
}

model ForumPostLike {
  id     String @id @default(cuid())
  userId String
  user   User @relation(fields: [userId], references: [id])
  postId String
  post   ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model ForumCommentLike {
  id        String @id @default(cuid())
  userId    String
  user      User @relation(fields: [userId], references: [id])
  commentId String
  comment   ForumComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  userId String
  user   User @relation(fields: [userId], references: [id])
}

enum NotificationType {
  COURSE_ENROLLMENT
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  CERTIFICATE_ISSUED
  CTF_SOLVED
  FORUM_REPLY
  SYSTEM
}

model UserProgress {
  id        String   @id @default(cuid())
  completed Boolean  @default(false)
  completedAt DateTime?
  progress  Float    @default(0) // percentage
  watchedTime Float? @default(0) // time watched in seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String
  user     User @relation(fields: [userId], references: [id])
  courseId String?
  course   Course? @relation(fields: [courseId], references: [id])
  lessonId String?
  lesson   Lesson? @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}

model UserBadge {
  id        String   @id @default(cuid())
  earnedAt  DateTime @default(now())

  // Relations
  userId String
  user   User @relation(fields: [userId], references: [id])
  badgeId String
  badge   Badge @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  color       String
  createdAt   DateTime @default(now())

  // Relations
  userBadges UserBadge[]
}

// CoursePrerequisite model removed for now

model Subscription {
  id        String   @id @default(cuid())
  name      String
  price     Float
  escudos   Int
  duration  Int      // in days
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LessonRating {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  rating    Int      // 1-5 stars
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model PopupNotification {
  id          String             @id @default(cuid())
  title       String
  message     String?
  imageUrl    String?
  type        PopupType          @default(POPUP)
  status      NotificationStatus @default(ACTIVE)
  timer       Int?               // Timer em segundos (null = sem timer)
  startDate   DateTime?          // Data de início
  endDate     DateTime?          // Data de fim
  targetRoles String?            // Roles que podem ver (JSON array)
  lastShownAt DateTime?          // Última vez que foi exibido
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdBy   String             // ID do admin que criou

  // Relations
  creator User @relation(fields: [createdBy], references: [id])
}
